//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bufman/registry/v1alpha/repository.proto

package registryv1alphaconnect

import (
	context "context"
	errors "errors"
	v1alpha "github.com/ProtobufMan/bufman/internal/gen/bufman/registry/v1alpha"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// RepositoryServiceName is the fully-qualified name of the RepositoryService service.
	RepositoryServiceName = "bufman.registry.v1alpha.RepositoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RepositoryServiceGetRepositoryProcedure is the fully-qualified name of the RepositoryService's
	// GetRepository RPC.
	RepositoryServiceGetRepositoryProcedure = "/bufman.registry.v1alpha.RepositoryService/GetRepository"
	// RepositoryServiceGetRepositoryByFullNameProcedure is the fully-qualified name of the
	// RepositoryService's GetRepositoryByFullName RPC.
	RepositoryServiceGetRepositoryByFullNameProcedure = "/bufman.registry.v1alpha.RepositoryService/GetRepositoryByFullName"
	// RepositoryServiceListRepositoriesProcedure is the fully-qualified name of the RepositoryService's
	// ListRepositories RPC.
	RepositoryServiceListRepositoriesProcedure = "/bufman.registry.v1alpha.RepositoryService/ListRepositories"
	// RepositoryServiceListUserRepositoriesProcedure is the fully-qualified name of the
	// RepositoryService's ListUserRepositories RPC.
	RepositoryServiceListUserRepositoriesProcedure = "/bufman.registry.v1alpha.RepositoryService/ListUserRepositories"
	// RepositoryServiceListRepositoriesUserCanAccessProcedure is the fully-qualified name of the
	// RepositoryService's ListRepositoriesUserCanAccess RPC.
	RepositoryServiceListRepositoriesUserCanAccessProcedure = "/bufman.registry.v1alpha.RepositoryService/ListRepositoriesUserCanAccess"
	// RepositoryServiceCreateRepositoryByFullNameProcedure is the fully-qualified name of the
	// RepositoryService's CreateRepositoryByFullName RPC.
	RepositoryServiceCreateRepositoryByFullNameProcedure = "/bufman.registry.v1alpha.RepositoryService/CreateRepositoryByFullName"
	// RepositoryServiceDeleteRepositoryProcedure is the fully-qualified name of the RepositoryService's
	// DeleteRepository RPC.
	RepositoryServiceDeleteRepositoryProcedure = "/bufman.registry.v1alpha.RepositoryService/DeleteRepository"
	// RepositoryServiceDeleteRepositoryByFullNameProcedure is the fully-qualified name of the
	// RepositoryService's DeleteRepositoryByFullName RPC.
	RepositoryServiceDeleteRepositoryByFullNameProcedure = "/bufman.registry.v1alpha.RepositoryService/DeleteRepositoryByFullName"
	// RepositoryServiceDeprecateRepositoryByNameProcedure is the fully-qualified name of the
	// RepositoryService's DeprecateRepositoryByName RPC.
	RepositoryServiceDeprecateRepositoryByNameProcedure = "/bufman.registry.v1alpha.RepositoryService/DeprecateRepositoryByName"
	// RepositoryServiceUndeprecateRepositoryByNameProcedure is the fully-qualified name of the
	// RepositoryService's UndeprecateRepositoryByName RPC.
	RepositoryServiceUndeprecateRepositoryByNameProcedure = "/bufman.registry.v1alpha.RepositoryService/UndeprecateRepositoryByName"
	// RepositoryServiceUpdateRepositorySettingsByNameProcedure is the fully-qualified name of the
	// RepositoryService's UpdateRepositorySettingsByName RPC.
	RepositoryServiceUpdateRepositorySettingsByNameProcedure = "/bufman.registry.v1alpha.RepositoryService/UpdateRepositorySettingsByName"
)

// RepositoryServiceClient is a client for the bufman.registry.v1alpha.RepositoryService service.
type RepositoryServiceClient interface {
	// GetRepository gets a repository by ID.
	GetRepository(context.Context, *connect_go.Request[v1alpha.GetRepositoryRequest]) (*connect_go.Response[v1alpha.GetRepositoryResponse], error)
	// GetRepositoryByFullName gets a repository by full name.
	GetRepositoryByFullName(context.Context, *connect_go.Request[v1alpha.GetRepositoryByFullNameRequest]) (*connect_go.Response[v1alpha.GetRepositoryByFullNameResponse], error)
	// ListRepositories lists all repositories.
	ListRepositories(context.Context, *connect_go.Request[v1alpha.ListRepositoriesRequest]) (*connect_go.Response[v1alpha.ListRepositoriesResponse], error)
	// ListUserRepositories lists all repositories belonging to a user.
	ListUserRepositories(context.Context, *connect_go.Request[v1alpha.ListUserRepositoriesRequest]) (*connect_go.Response[v1alpha.ListUserRepositoriesResponse], error)
	// ListRepositoriesUserCanAccess lists all repositories a user can access.
	ListRepositoriesUserCanAccess(context.Context, *connect_go.Request[v1alpha.ListRepositoriesUserCanAccessRequest]) (*connect_go.Response[v1alpha.ListRepositoriesUserCanAccessResponse], error)
	// CreateRepositoryByFullName creates a new repository by full name.
	CreateRepositoryByFullName(context.Context, *connect_go.Request[v1alpha.CreateRepositoryByFullNameRequest]) (*connect_go.Response[v1alpha.CreateRepositoryByFullNameResponse], error)
	// DeleteRepository deletes a repository.
	DeleteRepository(context.Context, *connect_go.Request[v1alpha.DeleteRepositoryRequest]) (*connect_go.Response[v1alpha.DeleteRepositoryResponse], error)
	// DeleteRepositoryByFullName deletes a repository by full name.
	DeleteRepositoryByFullName(context.Context, *connect_go.Request[v1alpha.DeleteRepositoryByFullNameRequest]) (*connect_go.Response[v1alpha.DeleteRepositoryByFullNameResponse], error)
	// DeprecateRepositoryByName deprecates the repository.
	DeprecateRepositoryByName(context.Context, *connect_go.Request[v1alpha.DeprecateRepositoryByNameRequest]) (*connect_go.Response[v1alpha.DeprecateRepositoryByNameResponse], error)
	// UndeprecateRepositoryByName makes the repository not deprecated and removes any deprecation_message.
	UndeprecateRepositoryByName(context.Context, *connect_go.Request[v1alpha.UndeprecateRepositoryByNameRequest]) (*connect_go.Response[v1alpha.UndeprecateRepositoryByNameResponse], error)
	// UpdateRepositorySettingsByName updates the settings of a repository.
	UpdateRepositorySettingsByName(context.Context, *connect_go.Request[v1alpha.UpdateRepositorySettingsByNameRequest]) (*connect_go.Response[v1alpha.UpdateRepositorySettingsByNameResponse], error)
}

// NewRepositoryServiceClient constructs a client for the bufman.registry.v1alpha.RepositoryService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRepositoryServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RepositoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &repositoryServiceClient{
		getRepository: connect_go.NewClient[v1alpha.GetRepositoryRequest, v1alpha.GetRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceGetRepositoryProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		getRepositoryByFullName: connect_go.NewClient[v1alpha.GetRepositoryByFullNameRequest, v1alpha.GetRepositoryByFullNameResponse](
			httpClient,
			baseURL+RepositoryServiceGetRepositoryByFullNameProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		listRepositories: connect_go.NewClient[v1alpha.ListRepositoriesRequest, v1alpha.ListRepositoriesResponse](
			httpClient,
			baseURL+RepositoryServiceListRepositoriesProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		listUserRepositories: connect_go.NewClient[v1alpha.ListUserRepositoriesRequest, v1alpha.ListUserRepositoriesResponse](
			httpClient,
			baseURL+RepositoryServiceListUserRepositoriesProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		listRepositoriesUserCanAccess: connect_go.NewClient[v1alpha.ListRepositoriesUserCanAccessRequest, v1alpha.ListRepositoriesUserCanAccessResponse](
			httpClient,
			baseURL+RepositoryServiceListRepositoriesUserCanAccessProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		createRepositoryByFullName: connect_go.NewClient[v1alpha.CreateRepositoryByFullNameRequest, v1alpha.CreateRepositoryByFullNameResponse](
			httpClient,
			baseURL+RepositoryServiceCreateRepositoryByFullNameProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyIdempotent),
			connect_go.WithClientOptions(opts...),
		),
		deleteRepository: connect_go.NewClient[v1alpha.DeleteRepositoryRequest, v1alpha.DeleteRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceDeleteRepositoryProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyIdempotent),
			connect_go.WithClientOptions(opts...),
		),
		deleteRepositoryByFullName: connect_go.NewClient[v1alpha.DeleteRepositoryByFullNameRequest, v1alpha.DeleteRepositoryByFullNameResponse](
			httpClient,
			baseURL+RepositoryServiceDeleteRepositoryByFullNameProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyIdempotent),
			connect_go.WithClientOptions(opts...),
		),
		deprecateRepositoryByName: connect_go.NewClient[v1alpha.DeprecateRepositoryByNameRequest, v1alpha.DeprecateRepositoryByNameResponse](
			httpClient,
			baseURL+RepositoryServiceDeprecateRepositoryByNameProcedure,
			opts...,
		),
		undeprecateRepositoryByName: connect_go.NewClient[v1alpha.UndeprecateRepositoryByNameRequest, v1alpha.UndeprecateRepositoryByNameResponse](
			httpClient,
			baseURL+RepositoryServiceUndeprecateRepositoryByNameProcedure,
			opts...,
		),
		updateRepositorySettingsByName: connect_go.NewClient[v1alpha.UpdateRepositorySettingsByNameRequest, v1alpha.UpdateRepositorySettingsByNameResponse](
			httpClient,
			baseURL+RepositoryServiceUpdateRepositorySettingsByNameProcedure,
			opts...,
		),
	}
}

// repositoryServiceClient implements RepositoryServiceClient.
type repositoryServiceClient struct {
	getRepository                  *connect_go.Client[v1alpha.GetRepositoryRequest, v1alpha.GetRepositoryResponse]
	getRepositoryByFullName        *connect_go.Client[v1alpha.GetRepositoryByFullNameRequest, v1alpha.GetRepositoryByFullNameResponse]
	listRepositories               *connect_go.Client[v1alpha.ListRepositoriesRequest, v1alpha.ListRepositoriesResponse]
	listUserRepositories           *connect_go.Client[v1alpha.ListUserRepositoriesRequest, v1alpha.ListUserRepositoriesResponse]
	listRepositoriesUserCanAccess  *connect_go.Client[v1alpha.ListRepositoriesUserCanAccessRequest, v1alpha.ListRepositoriesUserCanAccessResponse]
	createRepositoryByFullName     *connect_go.Client[v1alpha.CreateRepositoryByFullNameRequest, v1alpha.CreateRepositoryByFullNameResponse]
	deleteRepository               *connect_go.Client[v1alpha.DeleteRepositoryRequest, v1alpha.DeleteRepositoryResponse]
	deleteRepositoryByFullName     *connect_go.Client[v1alpha.DeleteRepositoryByFullNameRequest, v1alpha.DeleteRepositoryByFullNameResponse]
	deprecateRepositoryByName      *connect_go.Client[v1alpha.DeprecateRepositoryByNameRequest, v1alpha.DeprecateRepositoryByNameResponse]
	undeprecateRepositoryByName    *connect_go.Client[v1alpha.UndeprecateRepositoryByNameRequest, v1alpha.UndeprecateRepositoryByNameResponse]
	updateRepositorySettingsByName *connect_go.Client[v1alpha.UpdateRepositorySettingsByNameRequest, v1alpha.UpdateRepositorySettingsByNameResponse]
}

// GetRepository calls bufman.registry.v1alpha.RepositoryService.GetRepository.
func (c *repositoryServiceClient) GetRepository(ctx context.Context, req *connect_go.Request[v1alpha.GetRepositoryRequest]) (*connect_go.Response[v1alpha.GetRepositoryResponse], error) {
	return c.getRepository.CallUnary(ctx, req)
}

// GetRepositoryByFullName calls bufman.registry.v1alpha.RepositoryService.GetRepositoryByFullName.
func (c *repositoryServiceClient) GetRepositoryByFullName(ctx context.Context, req *connect_go.Request[v1alpha.GetRepositoryByFullNameRequest]) (*connect_go.Response[v1alpha.GetRepositoryByFullNameResponse], error) {
	return c.getRepositoryByFullName.CallUnary(ctx, req)
}

// ListRepositories calls bufman.registry.v1alpha.RepositoryService.ListRepositories.
func (c *repositoryServiceClient) ListRepositories(ctx context.Context, req *connect_go.Request[v1alpha.ListRepositoriesRequest]) (*connect_go.Response[v1alpha.ListRepositoriesResponse], error) {
	return c.listRepositories.CallUnary(ctx, req)
}

// ListUserRepositories calls bufman.registry.v1alpha.RepositoryService.ListUserRepositories.
func (c *repositoryServiceClient) ListUserRepositories(ctx context.Context, req *connect_go.Request[v1alpha.ListUserRepositoriesRequest]) (*connect_go.Response[v1alpha.ListUserRepositoriesResponse], error) {
	return c.listUserRepositories.CallUnary(ctx, req)
}

// ListRepositoriesUserCanAccess calls
// bufman.registry.v1alpha.RepositoryService.ListRepositoriesUserCanAccess.
func (c *repositoryServiceClient) ListRepositoriesUserCanAccess(ctx context.Context, req *connect_go.Request[v1alpha.ListRepositoriesUserCanAccessRequest]) (*connect_go.Response[v1alpha.ListRepositoriesUserCanAccessResponse], error) {
	return c.listRepositoriesUserCanAccess.CallUnary(ctx, req)
}

// CreateRepositoryByFullName calls
// bufman.registry.v1alpha.RepositoryService.CreateRepositoryByFullName.
func (c *repositoryServiceClient) CreateRepositoryByFullName(ctx context.Context, req *connect_go.Request[v1alpha.CreateRepositoryByFullNameRequest]) (*connect_go.Response[v1alpha.CreateRepositoryByFullNameResponse], error) {
	return c.createRepositoryByFullName.CallUnary(ctx, req)
}

// DeleteRepository calls bufman.registry.v1alpha.RepositoryService.DeleteRepository.
func (c *repositoryServiceClient) DeleteRepository(ctx context.Context, req *connect_go.Request[v1alpha.DeleteRepositoryRequest]) (*connect_go.Response[v1alpha.DeleteRepositoryResponse], error) {
	return c.deleteRepository.CallUnary(ctx, req)
}

// DeleteRepositoryByFullName calls
// bufman.registry.v1alpha.RepositoryService.DeleteRepositoryByFullName.
func (c *repositoryServiceClient) DeleteRepositoryByFullName(ctx context.Context, req *connect_go.Request[v1alpha.DeleteRepositoryByFullNameRequest]) (*connect_go.Response[v1alpha.DeleteRepositoryByFullNameResponse], error) {
	return c.deleteRepositoryByFullName.CallUnary(ctx, req)
}

// DeprecateRepositoryByName calls
// bufman.registry.v1alpha.RepositoryService.DeprecateRepositoryByName.
func (c *repositoryServiceClient) DeprecateRepositoryByName(ctx context.Context, req *connect_go.Request[v1alpha.DeprecateRepositoryByNameRequest]) (*connect_go.Response[v1alpha.DeprecateRepositoryByNameResponse], error) {
	return c.deprecateRepositoryByName.CallUnary(ctx, req)
}

// UndeprecateRepositoryByName calls
// bufman.registry.v1alpha.RepositoryService.UndeprecateRepositoryByName.
func (c *repositoryServiceClient) UndeprecateRepositoryByName(ctx context.Context, req *connect_go.Request[v1alpha.UndeprecateRepositoryByNameRequest]) (*connect_go.Response[v1alpha.UndeprecateRepositoryByNameResponse], error) {
	return c.undeprecateRepositoryByName.CallUnary(ctx, req)
}

// UpdateRepositorySettingsByName calls
// bufman.registry.v1alpha.RepositoryService.UpdateRepositorySettingsByName.
func (c *repositoryServiceClient) UpdateRepositorySettingsByName(ctx context.Context, req *connect_go.Request[v1alpha.UpdateRepositorySettingsByNameRequest]) (*connect_go.Response[v1alpha.UpdateRepositorySettingsByNameResponse], error) {
	return c.updateRepositorySettingsByName.CallUnary(ctx, req)
}

// RepositoryServiceHandler is an implementation of the bufman.registry.v1alpha.RepositoryService
// service.
type RepositoryServiceHandler interface {
	// GetRepository gets a repository by ID.
	GetRepository(context.Context, *connect_go.Request[v1alpha.GetRepositoryRequest]) (*connect_go.Response[v1alpha.GetRepositoryResponse], error)
	// GetRepositoryByFullName gets a repository by full name.
	GetRepositoryByFullName(context.Context, *connect_go.Request[v1alpha.GetRepositoryByFullNameRequest]) (*connect_go.Response[v1alpha.GetRepositoryByFullNameResponse], error)
	// ListRepositories lists all repositories.
	ListRepositories(context.Context, *connect_go.Request[v1alpha.ListRepositoriesRequest]) (*connect_go.Response[v1alpha.ListRepositoriesResponse], error)
	// ListUserRepositories lists all repositories belonging to a user.
	ListUserRepositories(context.Context, *connect_go.Request[v1alpha.ListUserRepositoriesRequest]) (*connect_go.Response[v1alpha.ListUserRepositoriesResponse], error)
	// ListRepositoriesUserCanAccess lists all repositories a user can access.
	ListRepositoriesUserCanAccess(context.Context, *connect_go.Request[v1alpha.ListRepositoriesUserCanAccessRequest]) (*connect_go.Response[v1alpha.ListRepositoriesUserCanAccessResponse], error)
	// CreateRepositoryByFullName creates a new repository by full name.
	CreateRepositoryByFullName(context.Context, *connect_go.Request[v1alpha.CreateRepositoryByFullNameRequest]) (*connect_go.Response[v1alpha.CreateRepositoryByFullNameResponse], error)
	// DeleteRepository deletes a repository.
	DeleteRepository(context.Context, *connect_go.Request[v1alpha.DeleteRepositoryRequest]) (*connect_go.Response[v1alpha.DeleteRepositoryResponse], error)
	// DeleteRepositoryByFullName deletes a repository by full name.
	DeleteRepositoryByFullName(context.Context, *connect_go.Request[v1alpha.DeleteRepositoryByFullNameRequest]) (*connect_go.Response[v1alpha.DeleteRepositoryByFullNameResponse], error)
	// DeprecateRepositoryByName deprecates the repository.
	DeprecateRepositoryByName(context.Context, *connect_go.Request[v1alpha.DeprecateRepositoryByNameRequest]) (*connect_go.Response[v1alpha.DeprecateRepositoryByNameResponse], error)
	// UndeprecateRepositoryByName makes the repository not deprecated and removes any deprecation_message.
	UndeprecateRepositoryByName(context.Context, *connect_go.Request[v1alpha.UndeprecateRepositoryByNameRequest]) (*connect_go.Response[v1alpha.UndeprecateRepositoryByNameResponse], error)
	// UpdateRepositorySettingsByName updates the settings of a repository.
	UpdateRepositorySettingsByName(context.Context, *connect_go.Request[v1alpha.UpdateRepositorySettingsByNameRequest]) (*connect_go.Response[v1alpha.UpdateRepositorySettingsByNameResponse], error)
}

// NewRepositoryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRepositoryServiceHandler(svc RepositoryServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	repositoryServiceGetRepositoryHandler := connect_go.NewUnaryHandler(
		RepositoryServiceGetRepositoryProcedure,
		svc.GetRepository,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	repositoryServiceGetRepositoryByFullNameHandler := connect_go.NewUnaryHandler(
		RepositoryServiceGetRepositoryByFullNameProcedure,
		svc.GetRepositoryByFullName,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	repositoryServiceListRepositoriesHandler := connect_go.NewUnaryHandler(
		RepositoryServiceListRepositoriesProcedure,
		svc.ListRepositories,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	repositoryServiceListUserRepositoriesHandler := connect_go.NewUnaryHandler(
		RepositoryServiceListUserRepositoriesProcedure,
		svc.ListUserRepositories,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	repositoryServiceListRepositoriesUserCanAccessHandler := connect_go.NewUnaryHandler(
		RepositoryServiceListRepositoriesUserCanAccessProcedure,
		svc.ListRepositoriesUserCanAccess,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	repositoryServiceCreateRepositoryByFullNameHandler := connect_go.NewUnaryHandler(
		RepositoryServiceCreateRepositoryByFullNameProcedure,
		svc.CreateRepositoryByFullName,
		connect_go.WithIdempotency(connect_go.IdempotencyIdempotent),
		connect_go.WithHandlerOptions(opts...),
	)
	repositoryServiceDeleteRepositoryHandler := connect_go.NewUnaryHandler(
		RepositoryServiceDeleteRepositoryProcedure,
		svc.DeleteRepository,
		connect_go.WithIdempotency(connect_go.IdempotencyIdempotent),
		connect_go.WithHandlerOptions(opts...),
	)
	repositoryServiceDeleteRepositoryByFullNameHandler := connect_go.NewUnaryHandler(
		RepositoryServiceDeleteRepositoryByFullNameProcedure,
		svc.DeleteRepositoryByFullName,
		connect_go.WithIdempotency(connect_go.IdempotencyIdempotent),
		connect_go.WithHandlerOptions(opts...),
	)
	repositoryServiceDeprecateRepositoryByNameHandler := connect_go.NewUnaryHandler(
		RepositoryServiceDeprecateRepositoryByNameProcedure,
		svc.DeprecateRepositoryByName,
		opts...,
	)
	repositoryServiceUndeprecateRepositoryByNameHandler := connect_go.NewUnaryHandler(
		RepositoryServiceUndeprecateRepositoryByNameProcedure,
		svc.UndeprecateRepositoryByName,
		opts...,
	)
	repositoryServiceUpdateRepositorySettingsByNameHandler := connect_go.NewUnaryHandler(
		RepositoryServiceUpdateRepositorySettingsByNameProcedure,
		svc.UpdateRepositorySettingsByName,
		opts...,
	)
	return "/bufman.registry.v1alpha.RepositoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RepositoryServiceGetRepositoryProcedure:
			repositoryServiceGetRepositoryHandler.ServeHTTP(w, r)
		case RepositoryServiceGetRepositoryByFullNameProcedure:
			repositoryServiceGetRepositoryByFullNameHandler.ServeHTTP(w, r)
		case RepositoryServiceListRepositoriesProcedure:
			repositoryServiceListRepositoriesHandler.ServeHTTP(w, r)
		case RepositoryServiceListUserRepositoriesProcedure:
			repositoryServiceListUserRepositoriesHandler.ServeHTTP(w, r)
		case RepositoryServiceListRepositoriesUserCanAccessProcedure:
			repositoryServiceListRepositoriesUserCanAccessHandler.ServeHTTP(w, r)
		case RepositoryServiceCreateRepositoryByFullNameProcedure:
			repositoryServiceCreateRepositoryByFullNameHandler.ServeHTTP(w, r)
		case RepositoryServiceDeleteRepositoryProcedure:
			repositoryServiceDeleteRepositoryHandler.ServeHTTP(w, r)
		case RepositoryServiceDeleteRepositoryByFullNameProcedure:
			repositoryServiceDeleteRepositoryByFullNameHandler.ServeHTTP(w, r)
		case RepositoryServiceDeprecateRepositoryByNameProcedure:
			repositoryServiceDeprecateRepositoryByNameHandler.ServeHTTP(w, r)
		case RepositoryServiceUndeprecateRepositoryByNameProcedure:
			repositoryServiceUndeprecateRepositoryByNameHandler.ServeHTTP(w, r)
		case RepositoryServiceUpdateRepositorySettingsByNameProcedure:
			repositoryServiceUpdateRepositorySettingsByNameHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRepositoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRepositoryServiceHandler struct{}

func (UnimplementedRepositoryServiceHandler) GetRepository(context.Context, *connect_go.Request[v1alpha.GetRepositoryRequest]) (*connect_go.Response[v1alpha.GetRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bufman.registry.v1alpha.RepositoryService.GetRepository is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) GetRepositoryByFullName(context.Context, *connect_go.Request[v1alpha.GetRepositoryByFullNameRequest]) (*connect_go.Response[v1alpha.GetRepositoryByFullNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bufman.registry.v1alpha.RepositoryService.GetRepositoryByFullName is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) ListRepositories(context.Context, *connect_go.Request[v1alpha.ListRepositoriesRequest]) (*connect_go.Response[v1alpha.ListRepositoriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bufman.registry.v1alpha.RepositoryService.ListRepositories is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) ListUserRepositories(context.Context, *connect_go.Request[v1alpha.ListUserRepositoriesRequest]) (*connect_go.Response[v1alpha.ListUserRepositoriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bufman.registry.v1alpha.RepositoryService.ListUserRepositories is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) ListRepositoriesUserCanAccess(context.Context, *connect_go.Request[v1alpha.ListRepositoriesUserCanAccessRequest]) (*connect_go.Response[v1alpha.ListRepositoriesUserCanAccessResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bufman.registry.v1alpha.RepositoryService.ListRepositoriesUserCanAccess is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) CreateRepositoryByFullName(context.Context, *connect_go.Request[v1alpha.CreateRepositoryByFullNameRequest]) (*connect_go.Response[v1alpha.CreateRepositoryByFullNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bufman.registry.v1alpha.RepositoryService.CreateRepositoryByFullName is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) DeleteRepository(context.Context, *connect_go.Request[v1alpha.DeleteRepositoryRequest]) (*connect_go.Response[v1alpha.DeleteRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bufman.registry.v1alpha.RepositoryService.DeleteRepository is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) DeleteRepositoryByFullName(context.Context, *connect_go.Request[v1alpha.DeleteRepositoryByFullNameRequest]) (*connect_go.Response[v1alpha.DeleteRepositoryByFullNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bufman.registry.v1alpha.RepositoryService.DeleteRepositoryByFullName is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) DeprecateRepositoryByName(context.Context, *connect_go.Request[v1alpha.DeprecateRepositoryByNameRequest]) (*connect_go.Response[v1alpha.DeprecateRepositoryByNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bufman.registry.v1alpha.RepositoryService.DeprecateRepositoryByName is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) UndeprecateRepositoryByName(context.Context, *connect_go.Request[v1alpha.UndeprecateRepositoryByNameRequest]) (*connect_go.Response[v1alpha.UndeprecateRepositoryByNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bufman.registry.v1alpha.RepositoryService.UndeprecateRepositoryByName is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) UpdateRepositorySettingsByName(context.Context, *connect_go.Request[v1alpha.UpdateRepositorySettingsByNameRequest]) (*connect_go.Response[v1alpha.UpdateRepositorySettingsByNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bufman.registry.v1alpha.RepositoryService.UpdateRepositorySettingsByName is not implemented"))
}
