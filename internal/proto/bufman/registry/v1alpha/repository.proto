/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package bufman.registry.v1alpha;

import "google/protobuf/timestamp.proto";

enum Visibility {
  VISIBILITY_UNSPECIFIED = 0;
  VISIBILITY_PUBLIC = 1;
  VISIBILITY_PRIVATE = 2;
}

message Repository {
  // primary key, unique, immutable
  string id = 1;
  // immutable
  google.protobuf.Timestamp create_time = 2;
  // mutable
  google.protobuf.Timestamp update_time = 3;
  // unique, mutable
  string name = 4;
  // user id
  string user_id = 5;
  // public or private
  Visibility visibility = 7;
  // deprecated means this repository is deprecated.
  bool deprecated = 8;
  // deprecation_message is the message shown if the repository is deprecated.
  string deprecation_message = 9;
  // owner_name is the name of the owner of the repository,
  // either a username or organization name.
  string owner_name = 10;
  // description is the user configurable description of the repository.
  string description = 11;
}

message RepositoryCounts {
  reserved 2;
  reserved "tracks_count";

  uint32 tags_count = 1;
  uint32 drafts_count = 3;
}

// RepositoryService is the Repository service.
service RepositoryService {
  // GetRepository gets a repository by ID.
  rpc GetRepository(GetRepositoryRequest) returns (GetRepositoryResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // GetRepositoryByFullName gets a repository by full name.
  rpc GetRepositoryByFullName(GetRepositoryByFullNameRequest) returns (GetRepositoryByFullNameResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // ListRepositories lists all repositories.
  rpc ListRepositories(ListRepositoriesRequest) returns (ListRepositoriesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // ListUserRepositories lists all repositories belonging to a user.
  rpc ListUserRepositories(ListUserRepositoriesRequest) returns (ListUserRepositoriesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // ListRepositoriesUserCanAccess lists all repositories a user can access.
  rpc ListRepositoriesUserCanAccess(ListRepositoriesUserCanAccessRequest) returns (ListRepositoriesUserCanAccessResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // CreateRepositoryByFullName creates a new repository by full name.
  rpc CreateRepositoryByFullName(CreateRepositoryByFullNameRequest) returns (CreateRepositoryByFullNameResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  // DeleteRepository deletes a repository.
  rpc DeleteRepository(DeleteRepositoryRequest) returns (DeleteRepositoryResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  // DeleteRepositoryByFullName deletes a repository by full name.
  rpc DeleteRepositoryByFullName(DeleteRepositoryByFullNameRequest) returns (DeleteRepositoryByFullNameResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  // DeprecateRepositoryByName deprecates the repository.
  rpc DeprecateRepositoryByName(DeprecateRepositoryByNameRequest) returns (DeprecateRepositoryByNameResponse);
  // UndeprecateRepositoryByName makes the repository not deprecated and removes any deprecation_message.
  rpc UndeprecateRepositoryByName(UndeprecateRepositoryByNameRequest) returns (UndeprecateRepositoryByNameResponse);
  // UpdateRepositorySettingsByName updates the settings of a repository.
  rpc UpdateRepositorySettingsByName(UpdateRepositorySettingsByNameRequest) returns (UpdateRepositorySettingsByNameResponse);
}

message GetRepositoryRequest {
  string id = 1;
}

message GetRepositoryResponse {
  Repository repository = 1;
  RepositoryCounts counts = 2;
}

message GetRepositoryByFullNameRequest {
  string full_name = 1;
}

message GetRepositoryByFullNameResponse {
  Repository repository = 1;
  RepositoryCounts counts = 2;
}

message ListRepositoriesRequest {
  uint32 page_size = 1;
  uint32 page_offset = 2;
  bool reverse = 3;
}

message ListRepositoriesResponse {
  repeated Repository repositories = 1;
}

message ListUserRepositoriesRequest {
  // The ID of the user whose repositories should be listed.
  string user_id = 1;
  uint32 page_size = 2;
  uint32 page_offset = 3;
  bool reverse = 4;
}

message ListUserRepositoriesResponse {
  repeated Repository repositories = 1;
}

message ListRepositoriesUserCanAccessRequest {
  uint32 page_size = 1;
  uint32 page_offset = 2;
  bool reverse = 3;
}

message ListRepositoriesUserCanAccessResponse {
  repeated Repository repositories = 1;
}

message CreateRepositoryByFullNameRequest {
  // Must be unique across repositories.
  string full_name = 1;
  Visibility visibility = 2;
}

message CreateRepositoryByFullNameResponse {
  Repository repository = 1;
}

message DeleteRepositoryRequest {
  string id = 1;
}

message DeleteRepositoryResponse {}

message DeleteRepositoryByFullNameRequest {
  string full_name = 1;
}

message DeleteRepositoryByFullNameResponse {}

message DeprecateRepositoryByNameRequest {
  string owner_name = 1;
  string repository_name = 2;
  // A message shown along with the deprecation warning for this repository.
  // It must be a utf8 encoded string containing 256 or fewer characters.
  string deprecation_message = 3;
}

message DeprecateRepositoryByNameResponse {
  Repository repository = 1;
}

message UndeprecateRepositoryByNameRequest {
  string owner_name = 1;
  string repository_name = 2;
}

message UndeprecateRepositoryByNameResponse {
  Repository repository = 1;
}

message UpdateRepositorySettingsByNameRequest {
  string owner_name = 1;
  string repository_name = 2;
  // optional, update to visibility will only be made if this is specified.
  Visibility visibility = 3;
  // optional, update to description will only be made when this is present
  optional string description = 4;
}

message UpdateRepositorySettingsByNameResponse {}
