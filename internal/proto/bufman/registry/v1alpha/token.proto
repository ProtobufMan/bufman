/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package bufman.registry.v1alpha;

import "google/protobuf/timestamp.proto";

message Token {
  string id = 1;
  google.protobuf.Timestamp create_time = 2;
  google.protobuf.Timestamp expire_time = 3;
  string note = 4;
}

// TokenService is the Token service.
service TokenService {
  // CreateToken creates a new token
  rpc CreateToken(CreateTokenRequest) returns (CreateTokenResponse);
  // GetToken gets the specific token for the user
  //
  // This method requires authentication.
  rpc GetToken(GetTokenRequest) returns (GetTokenResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // ListTokens lists the users active tokens
  //
  // This method requires authentication.
  rpc ListTokens(ListTokensRequest) returns (ListTokensResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // DeleteToken deletes an existing token.
  //
  // This method requires authentication.
  rpc DeleteToken(DeleteTokenRequest) returns (DeleteTokenResponse) {
    option idempotency_level = IDEMPOTENT;
  }
}

message CreateTokenRequest {
  string note = 1;
  // The time until which the token should be valid.
  // Must be in the future. May be null for no expiry.
  google.protobuf.Timestamp expire_time = 2;
  // the user name and pwd of the user
  string username = 3;
  string password = 4;
}

message CreateTokenResponse {
  // The plaintext token to use for authentication.
  string token = 1;
}

message GetTokenRequest {
  string token_id = 1;
}

message GetTokenResponse {
  Token token = 1;
}

message ListTokensRequest {
  uint32 page_size = 1;
  uint32 page_offset = 2;
  bool reverse = 3;
}

message ListTokensResponse {
  repeated Token tokens = 1;
}

message DeleteTokenRequest {
  string token_id = 1;
}

message DeleteTokenResponse {}