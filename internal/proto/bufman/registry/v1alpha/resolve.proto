/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package bufman.registry.v1alpha;

import "bufman/module/v1alpha/module.proto";

// ResolveService is the resolve service.
//
// This is the public service.
service ResolveService {
  // GetModulePins finds all the latest digests and respective dependencies of
  // the provided module references and picks a set of distinct modules pins.
  //
  // Note that module references with commits should still be passed to this function
  // to make sure this function can do dependency resolution.
  //
  // This function also deals with tiebreaking what ModulePin wins for the same repository.
  rpc GetModulePins(GetModulePinsRequest) returns (GetModulePinsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message GetModulePinsRequest {
  repeated bufman.module.v1alpha.ModuleReference module_references = 1;

  // current_module_pins allows for partial dependency updates by letting clients
  // send a request with the pins for their current module and only the
  // identities of the dependencies they want to update in module_references.
  //
  // When resolving, if a client supplied module pin is:
  // - in the transitive closure of pins resolved from the module_references,
  //   the client supplied module pin will be an extra candidate for tie
  //   breaking.
  // - NOT in the in the transitive closure of pins resolved from the
  //   module_references, it will be returned as is.
  repeated bufman.module.v1alpha.ModulePin current_module_pins = 2;
}

message GetModulePinsResponse {
  repeated bufman.module.v1alpha.ModulePin module_pins = 1;
}
