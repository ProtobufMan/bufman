// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ProtobufMan/bufman/internal/model"
)

func newDockerHub(db *gorm.DB, opts ...gen.DOOption) dockerHub {
	_dockerHub := dockerHub{}

	_dockerHub.dockerHubDo.UseDB(db, opts...)
	_dockerHub.dockerHubDo.UseModel(&model.DockerHub{})

	tableName := _dockerHub.dockerHubDo.TableName()
	_dockerHub.ALL = field.NewAsterisk(tableName)
	_dockerHub.ID = field.NewInt64(tableName, "id")
	_dockerHub.UserID = field.NewString(tableName, "user_id")
	_dockerHub.HubName = field.NewString(tableName, "hub_name")
	_dockerHub.Address = field.NewString(tableName, "address")
	_dockerHub.UserName = field.NewString(tableName, "user_name")
	_dockerHub.Password = field.NewString(tableName, "password")
	_dockerHub.IsExpired = field.NewBool(tableName, "is_expired")
	_dockerHub.Note = field.NewString(tableName, "note")

	_dockerHub.fillFieldMap()

	return _dockerHub
}

type dockerHub struct {
	dockerHubDo

	ALL       field.Asterisk
	ID        field.Int64
	UserID    field.String
	HubName   field.String
	Address   field.String
	UserName  field.String
	Password  field.String
	IsExpired field.Bool
	Note      field.String

	fieldMap map[string]field.Expr
}

func (d dockerHub) Table(newTableName string) *dockerHub {
	d.dockerHubDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dockerHub) As(alias string) *dockerHub {
	d.dockerHubDo.DO = *(d.dockerHubDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dockerHub) updateTableName(table string) *dockerHub {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.UserID = field.NewString(table, "user_id")
	d.HubName = field.NewString(table, "hub_name")
	d.Address = field.NewString(table, "address")
	d.UserName = field.NewString(table, "user_name")
	d.Password = field.NewString(table, "password")
	d.IsExpired = field.NewBool(table, "is_expired")
	d.Note = field.NewString(table, "note")

	d.fillFieldMap()

	return d
}

func (d *dockerHub) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dockerHub) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["id"] = d.ID
	d.fieldMap["user_id"] = d.UserID
	d.fieldMap["hub_name"] = d.HubName
	d.fieldMap["address"] = d.Address
	d.fieldMap["user_name"] = d.UserName
	d.fieldMap["password"] = d.Password
	d.fieldMap["is_expired"] = d.IsExpired
	d.fieldMap["note"] = d.Note
}

func (d dockerHub) clone(db *gorm.DB) dockerHub {
	d.dockerHubDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dockerHub) replaceDB(db *gorm.DB) dockerHub {
	d.dockerHubDo.ReplaceDB(db)
	return d
}

type dockerHubDo struct{ gen.DO }

type IDockerHubDo interface {
	gen.SubQuery
	Debug() IDockerHubDo
	WithContext(ctx context.Context) IDockerHubDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDockerHubDo
	WriteDB() IDockerHubDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDockerHubDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDockerHubDo
	Not(conds ...gen.Condition) IDockerHubDo
	Or(conds ...gen.Condition) IDockerHubDo
	Select(conds ...field.Expr) IDockerHubDo
	Where(conds ...gen.Condition) IDockerHubDo
	Order(conds ...field.Expr) IDockerHubDo
	Distinct(cols ...field.Expr) IDockerHubDo
	Omit(cols ...field.Expr) IDockerHubDo
	Join(table schema.Tabler, on ...field.Expr) IDockerHubDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDockerHubDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDockerHubDo
	Group(cols ...field.Expr) IDockerHubDo
	Having(conds ...gen.Condition) IDockerHubDo
	Limit(limit int) IDockerHubDo
	Offset(offset int) IDockerHubDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDockerHubDo
	Unscoped() IDockerHubDo
	Create(values ...*model.DockerHub) error
	CreateInBatches(values []*model.DockerHub, batchSize int) error
	Save(values ...*model.DockerHub) error
	First() (*model.DockerHub, error)
	Take() (*model.DockerHub, error)
	Last() (*model.DockerHub, error)
	Find() ([]*model.DockerHub, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DockerHub, err error)
	FindInBatches(result *[]*model.DockerHub, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DockerHub) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDockerHubDo
	Assign(attrs ...field.AssignExpr) IDockerHubDo
	Joins(fields ...field.RelationField) IDockerHubDo
	Preload(fields ...field.RelationField) IDockerHubDo
	FirstOrInit() (*model.DockerHub, error)
	FirstOrCreate() (*model.DockerHub, error)
	FindByPage(offset int, limit int) (result []*model.DockerHub, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDockerHubDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dockerHubDo) Debug() IDockerHubDo {
	return d.withDO(d.DO.Debug())
}

func (d dockerHubDo) WithContext(ctx context.Context) IDockerHubDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dockerHubDo) ReadDB() IDockerHubDo {
	return d.Clauses(dbresolver.Read)
}

func (d dockerHubDo) WriteDB() IDockerHubDo {
	return d.Clauses(dbresolver.Write)
}

func (d dockerHubDo) Session(config *gorm.Session) IDockerHubDo {
	return d.withDO(d.DO.Session(config))
}

func (d dockerHubDo) Clauses(conds ...clause.Expression) IDockerHubDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dockerHubDo) Returning(value interface{}, columns ...string) IDockerHubDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dockerHubDo) Not(conds ...gen.Condition) IDockerHubDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dockerHubDo) Or(conds ...gen.Condition) IDockerHubDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dockerHubDo) Select(conds ...field.Expr) IDockerHubDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dockerHubDo) Where(conds ...gen.Condition) IDockerHubDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dockerHubDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDockerHubDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dockerHubDo) Order(conds ...field.Expr) IDockerHubDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dockerHubDo) Distinct(cols ...field.Expr) IDockerHubDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dockerHubDo) Omit(cols ...field.Expr) IDockerHubDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dockerHubDo) Join(table schema.Tabler, on ...field.Expr) IDockerHubDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dockerHubDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDockerHubDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dockerHubDo) RightJoin(table schema.Tabler, on ...field.Expr) IDockerHubDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dockerHubDo) Group(cols ...field.Expr) IDockerHubDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dockerHubDo) Having(conds ...gen.Condition) IDockerHubDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dockerHubDo) Limit(limit int) IDockerHubDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dockerHubDo) Offset(offset int) IDockerHubDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dockerHubDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDockerHubDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dockerHubDo) Unscoped() IDockerHubDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dockerHubDo) Create(values ...*model.DockerHub) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dockerHubDo) CreateInBatches(values []*model.DockerHub, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dockerHubDo) Save(values ...*model.DockerHub) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dockerHubDo) First() (*model.DockerHub, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DockerHub), nil
	}
}

func (d dockerHubDo) Take() (*model.DockerHub, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DockerHub), nil
	}
}

func (d dockerHubDo) Last() (*model.DockerHub, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DockerHub), nil
	}
}

func (d dockerHubDo) Find() ([]*model.DockerHub, error) {
	result, err := d.DO.Find()
	return result.([]*model.DockerHub), err
}

func (d dockerHubDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DockerHub, err error) {
	buf := make([]*model.DockerHub, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dockerHubDo) FindInBatches(result *[]*model.DockerHub, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dockerHubDo) Attrs(attrs ...field.AssignExpr) IDockerHubDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dockerHubDo) Assign(attrs ...field.AssignExpr) IDockerHubDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dockerHubDo) Joins(fields ...field.RelationField) IDockerHubDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dockerHubDo) Preload(fields ...field.RelationField) IDockerHubDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dockerHubDo) FirstOrInit() (*model.DockerHub, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DockerHub), nil
	}
}

func (d dockerHubDo) FirstOrCreate() (*model.DockerHub, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DockerHub), nil
	}
}

func (d dockerHubDo) FindByPage(offset int, limit int) (result []*model.DockerHub, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dockerHubDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dockerHubDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dockerHubDo) Delete(models ...*model.DockerHub) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dockerHubDo) withDO(do gen.Dao) *dockerHubDo {
	d.DO = *do.(*gen.DO)
	return d
}
