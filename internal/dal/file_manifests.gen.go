// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ProtobufMan/bufman/internal/model"
)

func newFileManifest(db *gorm.DB, opts ...gen.DOOption) fileManifest {
	_fileManifest := fileManifest{}

	_fileManifest.fileManifestDo.UseDB(db, opts...)
	_fileManifest.fileManifestDo.UseModel(&model.FileManifest{})

	tableName := _fileManifest.fileManifestDo.TableName()
	_fileManifest.ALL = field.NewAsterisk(tableName)
	_fileManifest.ID = field.NewInt64(tableName, "id")
	_fileManifest.Digest = field.NewString(tableName, "digest")
	_fileManifest.CommitID = field.NewString(tableName, "commit_id")
	_fileManifest.FileName = field.NewString(tableName, "file_name")

	_fileManifest.fillFieldMap()

	return _fileManifest
}

type fileManifest struct {
	fileManifestDo

	ALL      field.Asterisk
	ID       field.Int64
	Digest   field.String
	CommitID field.String
	FileName field.String

	fieldMap map[string]field.Expr
}

func (f fileManifest) Table(newTableName string) *fileManifest {
	f.fileManifestDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileManifest) As(alias string) *fileManifest {
	f.fileManifestDo.DO = *(f.fileManifestDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileManifest) updateTableName(table string) *fileManifest {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Digest = field.NewString(table, "digest")
	f.CommitID = field.NewString(table, "commit_id")
	f.FileName = field.NewString(table, "file_name")

	f.fillFieldMap()

	return f
}

func (f *fileManifest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileManifest) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 4)
	f.fieldMap["id"] = f.ID
	f.fieldMap["digest"] = f.Digest
	f.fieldMap["commit_id"] = f.CommitID
	f.fieldMap["file_name"] = f.FileName
}

func (f fileManifest) clone(db *gorm.DB) fileManifest {
	f.fileManifestDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileManifest) replaceDB(db *gorm.DB) fileManifest {
	f.fileManifestDo.ReplaceDB(db)
	return f
}

type fileManifestDo struct{ gen.DO }

type IFileManifestDo interface {
	gen.SubQuery
	Debug() IFileManifestDo
	WithContext(ctx context.Context) IFileManifestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileManifestDo
	WriteDB() IFileManifestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileManifestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileManifestDo
	Not(conds ...gen.Condition) IFileManifestDo
	Or(conds ...gen.Condition) IFileManifestDo
	Select(conds ...field.Expr) IFileManifestDo
	Where(conds ...gen.Condition) IFileManifestDo
	Order(conds ...field.Expr) IFileManifestDo
	Distinct(cols ...field.Expr) IFileManifestDo
	Omit(cols ...field.Expr) IFileManifestDo
	Join(table schema.Tabler, on ...field.Expr) IFileManifestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileManifestDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileManifestDo
	Group(cols ...field.Expr) IFileManifestDo
	Having(conds ...gen.Condition) IFileManifestDo
	Limit(limit int) IFileManifestDo
	Offset(offset int) IFileManifestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileManifestDo
	Unscoped() IFileManifestDo
	Create(values ...*model.FileManifest) error
	CreateInBatches(values []*model.FileManifest, batchSize int) error
	Save(values ...*model.FileManifest) error
	First() (*model.FileManifest, error)
	Take() (*model.FileManifest, error)
	Last() (*model.FileManifest, error)
	Find() ([]*model.FileManifest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileManifest, err error)
	FindInBatches(result *[]*model.FileManifest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FileManifest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileManifestDo
	Assign(attrs ...field.AssignExpr) IFileManifestDo
	Joins(fields ...field.RelationField) IFileManifestDo
	Preload(fields ...field.RelationField) IFileManifestDo
	FirstOrInit() (*model.FileManifest, error)
	FirstOrCreate() (*model.FileManifest, error)
	FindByPage(offset int, limit int) (result []*model.FileManifest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileManifestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fileManifestDo) Debug() IFileManifestDo {
	return f.withDO(f.DO.Debug())
}

func (f fileManifestDo) WithContext(ctx context.Context) IFileManifestDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileManifestDo) ReadDB() IFileManifestDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileManifestDo) WriteDB() IFileManifestDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileManifestDo) Session(config *gorm.Session) IFileManifestDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileManifestDo) Clauses(conds ...clause.Expression) IFileManifestDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileManifestDo) Returning(value interface{}, columns ...string) IFileManifestDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileManifestDo) Not(conds ...gen.Condition) IFileManifestDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileManifestDo) Or(conds ...gen.Condition) IFileManifestDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileManifestDo) Select(conds ...field.Expr) IFileManifestDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileManifestDo) Where(conds ...gen.Condition) IFileManifestDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileManifestDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFileManifestDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f fileManifestDo) Order(conds ...field.Expr) IFileManifestDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileManifestDo) Distinct(cols ...field.Expr) IFileManifestDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileManifestDo) Omit(cols ...field.Expr) IFileManifestDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileManifestDo) Join(table schema.Tabler, on ...field.Expr) IFileManifestDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileManifestDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileManifestDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileManifestDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileManifestDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileManifestDo) Group(cols ...field.Expr) IFileManifestDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileManifestDo) Having(conds ...gen.Condition) IFileManifestDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileManifestDo) Limit(limit int) IFileManifestDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileManifestDo) Offset(offset int) IFileManifestDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileManifestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileManifestDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileManifestDo) Unscoped() IFileManifestDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileManifestDo) Create(values ...*model.FileManifest) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileManifestDo) CreateInBatches(values []*model.FileManifest, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileManifestDo) Save(values ...*model.FileManifest) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileManifestDo) First() (*model.FileManifest, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileManifest), nil
	}
}

func (f fileManifestDo) Take() (*model.FileManifest, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileManifest), nil
	}
}

func (f fileManifestDo) Last() (*model.FileManifest, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileManifest), nil
	}
}

func (f fileManifestDo) Find() ([]*model.FileManifest, error) {
	result, err := f.DO.Find()
	return result.([]*model.FileManifest), err
}

func (f fileManifestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileManifest, err error) {
	buf := make([]*model.FileManifest, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileManifestDo) FindInBatches(result *[]*model.FileManifest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileManifestDo) Attrs(attrs ...field.AssignExpr) IFileManifestDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileManifestDo) Assign(attrs ...field.AssignExpr) IFileManifestDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileManifestDo) Joins(fields ...field.RelationField) IFileManifestDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileManifestDo) Preload(fields ...field.RelationField) IFileManifestDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileManifestDo) FirstOrInit() (*model.FileManifest, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileManifest), nil
	}
}

func (f fileManifestDo) FirstOrCreate() (*model.FileManifest, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileManifest), nil
	}
}

func (f fileManifestDo) FindByPage(offset int, limit int) (result []*model.FileManifest, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileManifestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileManifestDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileManifestDo) Delete(models ...*model.FileManifest) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileManifestDo) withDO(do gen.Dao) *fileManifestDo {
	f.DO = *do.(*gen.DO)
	return f
}
